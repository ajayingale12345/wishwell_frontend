name: angular CI
on:
  
  workflow_dispatch:
    inputs:
      use-cache:
        description: "Whether to execute cache step"
        type: boolean
        default: true
      node-version:
        description: "Select Node.js version"
        type: choice
        options:
          - '18.x'
          - '20.x'
        default: '20.x'

jobs:
  install-deps:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    outputs:
      deps-cache-key: ${{ steps.cache-key.outputs.CACHE_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version }}
      - name: Calculate Cache-key
        id: cache-key
        run: echo "CACHE_KEY=deep-node-modules-${{ hashfiles('frontend/package-lock.json') }}" >> "$GITHUB_OUTPUT"
      - name: Download cached dependencies
        uses: actions/cache@v3
        id: cache
        with:
          path: frontend/node_modules
          key: ${{ steps.cache-key.outputs.CACHE_KEY }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
   

  build:
    runs-on: ubuntu-latest
    # needs: install-deps
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version }}
      - name: Install Chromium dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3 libxss1 libasound2 libatk-bridge2.0-0 libcups2 libxcomposite1 libxrandr2 libpangocairo-1.0-0
      - name: Install dependencies
      
        run: npm ci
      - name: Build the project
        run: npm run build
          
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v2
        with:
          projectBaseDir: frontend
          args: >
            -Dsonar.projectKey=ajayingale12345_wishwell-frontend
            -Dsonar.projectName=wishwell_frontend
            -Dsonar.organization=ajayingale12345
            -Dsonar.sources=src
            -Dsonar.test.inclusions=**/*.spec.ts
            -Dsonar.exclusions=**/node_modules/**,**/*.spec.ts
            -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  notify:
    runs-on: ubuntu-latest
    needs: [ install-deps, build ]
    steps:
      - name: Send notification to Slack from GitHub using GitHub Action
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": "Sonar Analysis done"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  trivey-scan:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    permissions:
      security-events: write
    outputs:
      deps-cache-key: ${{ steps.cache-key.outputs.CACHE_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version }}
      - name: Calculate Cache-key
        id: cache-key
        run: echo "CACHE_KEY=deep-node-modules-${{ hashfiles('frontend/package-lock.json') }}" >> "$GITHUB_OUTPUT"
      - name: Download cached dependencies
        uses: actions/cache@v3
        id: cache
        with:
          path: frontend/node_modules
          key: ${{ steps.cache-key.outputs.CACHE_KEY }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      - name: Run Trivy in GitHub SBOM mode and submit results to Dependency Graph
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'github'
          output: 'dependency-results.sbom.json'
          image-ref: '.'
          github-pat: ${{ secrets.TOKEN_GITHUB }} 

      - name: Create coverage artifact
        uses: actions/upload-artifact@v2
        with:
          name: SBOM result
          path: dependency-results.sbom.json

 
        
      
      

 

        
